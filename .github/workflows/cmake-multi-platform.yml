# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      VCPKG_ROOT: $RUNNER_TEMP/vcpkg
      
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      # ─── LINUX / macOS ────────────────────────────────────────────────────────
      - name: Bootstrap vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          git clone https://github.com/microsoft/vcpkg.git "$RUNNER_TEMP/vcpkg"
          "$RUNNER_TEMP/vcpkg/bootstrap-vcpkg.sh"
          echo "VCPKG_ROOT=$RUNNER_TEMP/vcpkg" >> $GITHUB_ENV
          echo "$RUNNER_TEMP/vcpkg" >> $GITHUB_PATH

      # ─── WINDOWS ──────────────────────────────────────────────────────────────
      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $dest = Join-Path $Env:RUNNER_TEMP 'vcpkg'
          git clone https://github.com/microsoft/vcpkg.git $dest
          & "$dest\bootstrap-vcpkg.bat"
          # persist to future steps:
          "`nVCPKG_ROOT=$dest" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          $dest | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Configure via CMake preset
        run: cmake --preset vs2022

      - name: Build via CMake preset
        run: cmake --build --preset vs2022 --config ${{ matrix.build_type }}

      - name: Test via CMake preset
        run: cmake --test --preset vs2022 --config ${{ matrix.build_type }}
